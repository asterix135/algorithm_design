'''approaches to multiplying two SQUARE matrices with identical dimensions
May throw an error if these conditions are not met'''

## setup stuff
import time
import random

def brute_force(x_matrix, y_matrix):
    '''brute force calculation of matrix multiplication
    assumes matrices are of dimensions that can be multiplied - no check for this'''
    start = time.time()

    ## create empty output matrix - works for different sizes
    z_matrix = create_blank_matrix(len(x_matrix), len(y_matrix[0]))

    for xrow in range(len(x_matrix)):
        for ycol in range(len(y_matrix[0])):
            for yrow in range(len(y_matrix)):
                z_matrix[xrow][ycol] += x_matrix[xrow][yrow] * y_matrix[yrow][ycol]

    print ('brute force run time: ' + str(time.time() - start))
    return z_matrix

def strassen_matrix_multiplication(x_matrix, y_matrix):
    ''' uses Strassens algorithm to multiply matrix
    :param x_matrix:
    :param y_matrix:
    :return z_matrix:
    '''
    start = time.time()
    z_matrix = recur_split_and_multiply(x_matrix, y_matrix)
    print ('recursive run time: ' + str(time.time() - start))
    return z_matrix

def create_blank_matrix(num_rows, num_cols):
    blank_matrix = [[0 for dummycol in range(num_rows)] for dummyrow in range(num_cols)]
    return blank_matrix


def recur_split_and_multiply(x_matrix, y_matrix):
    x_size = (len(x_matrix), len(x_matrix)[0])
    y_size = (len(y_matrix), len(y_matrix)[0])
    if x_size[0] <= 2 and y_size[0] <=2:
        z_matrix = create_blank_matrix(x_size)
    else:
        pass
    ## Note that the second half will be longer if the original matrix is of odd length
    a_matrix = x_matrix[:size//2][:size//2]
    b_matrix = x_matrix[:size//2][size//2:]
    c_matrix = x_matrix[size//2:][:size//2]
    d_matrix = x_matrix[size//2:][size//2:]
    e_matrix = y_matrix[:size//2][:size//2]
    f_matrix = y_matrix[:size//2][size//2:]
    g_matrix = y_matrix[size//2:][:size//2]
    h_matrix = y_matrix[size//2:][size//2:]




def gen_random_square_matrix(size, upper_limit = 99):
    '''generates a random square matrix of given size with integer values between 0 and 99'''
    return [[random.randrange(upper_limit) for dummycol in range(size)]
                for dummyrow in range(size)]

def test():
    ## 2x2 matrices
    X = [[1, -2], [3, -4]]
    Y = [[1, -1], [2, 2]]
    Z = (brute_force(X,Y))
    answer = [[-3, -5], [-5, -11]]
    if Z == answer:
        print ('Correct answer: '+ str(Z))
    else:
        print ('Wrong answer: ' + str(Z) + '\n Should be: ' + str(answer))

    ## 4x4 matrices
    X = [[1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12], [13, 14, 15, 16]]
    Y = [[10,9,8,7],[6,5,4,3],[2,1,0,-1],[-2,-3,-4,-5]]
    Z = (brute_force(X,Y))
    answer = [[20, 10, 0, -10], [84,58,32,6], [148,106,64,22], [212,154,96,38]]
    if Z == answer:
        print ('Correct answer: ' + str(Z))
    else:
        print ('Wrong answer: ' + str(Z) + '\n Should be: ' + str(answer))

    ## 5x5 matrices
    X = [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], [9,10,11,12,13], [13, 14, 15, 16,17], [17, 18, 19, 20,21]]
    Y = [[10,9,8,7,6],[6,5,4,3,2],[2,1,0,-1,-2],[-2,-3,-4,-5,-6],[-7,-8,-9,-10,-11]]
    Z = (brute_force(X,Y))
    answer = [[-15, -30, -45, -60, -75], [21, -14, -49, -84, -119], [57, 2, -53, -108, -163], [93, 18, -57, -132, -207], [129, 34, -61, -156, -251]]
    if Z == answer:
        print ('Correct answer: ' + str(Z))
    else:
        print ('Wrong answer: ' + str(Z) + '\n Should be: ' + str(answer))

    matrix_size = 25
    random.seed(42)
    X = gen_random_square_matrix(matrix_size)
    random.seed(24)
    Y = gen_random_square_matrix(matrix_size)
    for row in brute_force(X, Y):
        print (row)
    answer = [[53329, 49679, 51597, 46119, 60205, 44991, 37027, 57580, 32904, 65200, 65945, 53220, 58939, 52099, 63096, 54985, 32110, 43979, 53542, 45942, 51502, 54046, 41616, 62945, 67628], [52721, 55012, 51644, 58401, 71415, 60940, 41027, 62787, 45130, 68317, 69588, 47567, 56594, 53170, 68273, 64106, 47095, 54184, 56429, 42093, 67609, 64989, 49032, 71246, 71163], [62394, 59276, 57528, 51279, 77983, 68429, 48127, 82088, 48640, 67782, 74712, 56113, 68187, 51686, 65893, 74073, 52532, 56087, 63721, 47556, 68553, 70088, 52970, 76719, 82119], [61439, 58558, 54579, 67176, 67158, 61742, 45176, 68084, 53136, 62580, 69003, 54920, 67443, 63017, 79219, 70536, 45818, 53624, 64469, 50767, 67111, 55868, 45180, 64226, 71612], [63428, 65351, 56296, 49642, 65011, 61268, 54306, 72685, 45040, 72004, 69393, 61621, 71986, 47672, 70994, 77939, 54032, 46522, 57383, 48179, 71139, 67093, 55264, 67656, 75690], [60833, 53067, 48028, 56054, 79819, 63248, 43917, 70011, 44062, 67441, 62936, 50589, 68202, 52743, 58964, 66480, 48509, 52692, 49577, 47240, 61346, 64483, 44717, 70055, 71737], [60748, 55211, 50572, 59639, 61163, 63211, 44377, 64087, 46580, 63931, 68013, 54445, 60385, 56983, 71021, 63729, 42181, 60085, 65355, 42378, 61768, 59531, 44286, 64611, 76221], [52822, 45646, 55750, 59523, 66976, 58286, 44630, 66816, 40542, 75956, 72074, 52549, 67550, 59986, 68924, 69652, 38898, 47997, 63612, 47648, 65447, 58420, 45869, 62136, 71010], [76007, 73800, 67389, 65394, 68386, 67643, 53602, 73529, 45001, 79991, 79950, 67414, 79102, 57075, 84338, 80599, 57536, 59309, 68838, 55622, 74719, 72170, 55979, 76674, 80314], [61092, 55491, 56189, 61849, 67823, 58722, 44221, 64662, 41025, 70461, 71925, 55991, 74243, 56903, 69881, 66671, 41972, 55463, 59531, 49487, 61855, 64238, 43538, 67972, 71498], [61201, 71891, 65277, 55868, 63494, 64278, 55904, 76717, 47062, 76353, 83262, 69666, 82184, 54320, 81982, 80889, 55889, 57037, 60074, 56944, 79018, 73224, 60489, 76583, 85177], [49085, 45302, 46142, 48571, 56456, 54469, 42210, 61003, 41738, 60002, 59122, 49010, 66781, 51939, 55830, 61947, 38434, 47738, 51428, 52259, 58087, 49124, 47199, 58991, 65223], [81955, 75261, 66875, 66190, 79682, 78440, 58580, 79238, 51518, 87986, 76695, 66166, 80962, 63158, 81569, 86929, 64846, 64147, 69334, 63041, 73469, 80875, 53114, 79777, 82476], [68707, 60648, 61862, 64448, 77268, 71692, 50302, 81910, 47948, 82793, 77693, 62335, 75495, 57411, 77055, 79990, 55033, 58443, 65164, 53858, 81974, 72161, 56908, 76478, 80976], [67736, 61727, 60600, 65360, 78469, 67453, 44204, 70845, 43162, 78103, 76624, 62677, 77279, 55843, 74805, 71876, 50693, 61920, 66411, 62048, 68750, 68732, 47535, 79194, 83535], [57860, 53238, 51175, 50406, 65805, 63636, 46792, 64692, 42763, 64198, 67376, 54768, 63108, 48816, 61300, 65337, 45264, 52073, 54819, 40371, 65630, 53254, 47155, 65303, 70178], [50204, 50998, 49388, 53326, 66965, 50140, 39211, 65466, 44455, 60380, 65378, 49568, 61579, 47407, 63692, 61014, 43100, 50485, 52406, 47665, 60771, 61677, 42219, 65562, 69685], [72828, 70566, 64622, 58904, 84453, 72396, 60360, 75970, 49134, 83217, 73036, 63529, 75283, 62649, 76878, 83726, 62868, 65136, 60806, 59112, 67877, 72978, 52447, 85287, 84727], [51019, 51962, 41808, 54527, 56462, 53254, 40041, 57662, 40072, 61743, 56933, 54726, 56770, 57798, 67008, 53156, 36319, 46681, 56906, 43054, 51161, 51590, 38226, 57428, 69562], [61714, 63289, 51798, 58355, 65274, 63810, 46693, 69827, 48034, 69446, 66275, 56343, 64862, 50646, 72493, 69621, 54551, 61294, 55345, 51696, 71401, 71089, 50574, 73533, 75914], [57896, 50808, 48437, 48902, 57272, 57991, 40970, 63075, 31476, 65256, 60921, 42723, 54126, 44762, 61857, 70662, 47219, 45675, 49175, 34588, 62322, 62126, 46969, 60023, 62148], [61694, 56477, 54254, 55216, 63608, 63660, 48581, 62707, 45659, 64545, 60781, 55584, 66530, 52669, 66134, 66125, 50096, 51860, 61744, 45490, 61882, 54715, 49101, 67816, 62881], [68548, 72290, 62846, 66462, 81282, 78323, 55773, 77283, 50552, 87687, 80256, 65826, 81582, 65744, 84025, 84360, 59634, 69584, 66125, 58300, 74483, 83524, 52518, 83198, 89892], [59828, 56255, 54730, 62333, 74803, 60554, 46151, 73611, 43814, 79471, 73708, 61160, 75696, 60199, 74829, 66050, 41553, 51393, 70012, 52431, 66905, 62621, 45489, 74620, 80727], [46714, 48049, 48254, 48637, 64123, 59573, 48229, 64185, 42207, 62581, 58942, 51336, 67200, 52433, 58218, 66243, 42610, 48453, 54066, 43353, 59869, 53582, 48630, 61525, 70959]]


    # matrix_size = 450
    # random.seed(97)
    # X = gen_random_square_matrix(matrix_size)
    # random.seed(342)
    # Y = gen_random_square_matrix(matrix_size)
    # Z = brute_force(X, Y)


test()
